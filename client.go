// Package loops provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package loops

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Contact defines model for Contact.
type Contact struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *string `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`

	// MailingLists An object of mailing list IDs and boolean subscription statuses.
	MailingLists *map[string]interface{} `json:"mailingLists,omitempty"`
	Source       *string                 `json:"source,omitempty"`
	Subscribed   *bool                   `json:"subscribed,omitempty"`
	UserGroup    *string                 `json:"userGroup,omitempty"`
	UserId       *string                 `json:"userId,omitempty"`
}

// ContactDeleteRequest defines model for ContactDeleteRequest.
type ContactDeleteRequest struct {
	Email  string `json:"email"`
	UserId string `json:"userId"`
}

// ContactDeleteResponse defines model for ContactDeleteResponse.
type ContactDeleteResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// ContactFailureResponse defines model for ContactFailureResponse.
type ContactFailureResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// ContactRequest defines model for ContactRequest.
type ContactRequest struct {
	Email     string  `json:"email"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`

	// MailingLists An object of mailing list IDs and boolean subscription statuses.
	MailingLists *map[string]interface{} `json:"mailingLists,omitempty"`
	Subscribed   *bool                   `json:"subscribed,omitempty"`
	UserGroup    *string                 `json:"userGroup,omitempty"`
	UserId       *string                 `json:"userId,omitempty"`
}

// ContactSuccessResponse defines model for ContactSuccessResponse.
type ContactSuccessResponse struct {
	Id      string `json:"id"`
	Success bool   `json:"success"`
}

// CustomField defines model for CustomField.
type CustomField struct {
	Key   string `json:"key"`
	Label string `json:"label"`
	Type  string `json:"type"`
}

// EventFailureResponse defines model for EventFailureResponse.
type EventFailureResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// EventRequest defines model for EventRequest.
type EventRequest struct {
	Email     *string `json:"email,omitempty"`
	EventName string  `json:"eventName"`

	// EventProperties An object containing event property data for the event, available in emails sent by the event.
	EventProperties *map[string]interface{} `json:"eventProperties,omitempty"`

	// MailingLists An object of mailing list IDs and boolean subscription statuses.
	MailingLists *map[string]interface{} `json:"mailingLists,omitempty"`
	UserId       *string                 `json:"userId,omitempty"`
}

// EventSuccessResponse defines model for EventSuccessResponse.
type EventSuccessResponse struct {
	Success bool `json:"success"`
}

// MailingList defines model for MailingList.
type MailingList struct {
	Id       string `json:"id"`
	IsPublic bool   `json:"isPublic"`
	Name     string `json:"name"`
}

// TransactionalFailure2Response defines model for TransactionalFailure2Response.
type TransactionalFailure2Response struct {
	Error struct {
		Message *string `json:"message,omitempty"`
		Path    *string `json:"path,omitempty"`
	} `json:"error"`
	Success bool `json:"success"`
}

// TransactionalFailure3Response defines model for TransactionalFailure3Response.
type TransactionalFailure3Response struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// TransactionalFailureResponse defines model for TransactionalFailureResponse.
type TransactionalFailureResponse struct {
	Message string `json:"message"`
	Path    string `json:"path"`
	Success bool   `json:"success"`
}

// TransactionalRequest defines model for TransactionalRequest.
type TransactionalRequest struct {
	// AddToAudience If `true`, a contact will be created in your audience using the `email` value (if a matching contact doesn't already exist).
	AddToAudience *bool `json:"addToAudience,omitempty"`

	// Attachments A list containing file objects to be sent along with an email message.
	Attachments *[]struct {
		// ContentType The MIME type of the file.
		ContentType string `json:"contentType"`

		// Data The base64-encoded content of the file.
		Data string `json:"data"`

		// Filename The name of the file, shown in email clients.
		Filename string `json:"filename"`
	} `json:"attachments,omitempty"`

	// DataVariables An object containing contact data as defined by the data variables added to the transactional email template.
	DataVariables *map[string]interface{} `json:"dataVariables,omitempty"`
	Email         string                  `json:"email"`

	// TransactionalId The ID of the transactional email to send.
	TransactionalId string `json:"transactionalId"`
}

// TransactionalSuccessResponse defines model for TransactionalSuccessResponse.
type TransactionalSuccessResponse struct {
	Success bool `json:"success"`
}

// GetContactsFindParams defines parameters for GetContactsFind.
type GetContactsFindParams struct {
	// Email Email address (URI-encoded)
	Email  *string `form:"email,omitempty" json:"email,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// PostContactsCreateJSONRequestBody defines body for PostContactsCreate for application/json ContentType.
type PostContactsCreateJSONRequestBody = ContactRequest

// PostContactsDeleteJSONRequestBody defines body for PostContactsDelete for application/json ContentType.
type PostContactsDeleteJSONRequestBody = ContactDeleteRequest

// PutContactsUpdateJSONRequestBody defines body for PutContactsUpdate for application/json ContentType.
type PutContactsUpdateJSONRequestBody = ContactRequest

// PostEventsSendJSONRequestBody defines body for PostEventsSend for application/json ContentType.
type PostEventsSendJSONRequestBody = EventRequest

// PostTransactionalJSONRequestBody defines body for PostTransactional for application/json ContentType.
type PostTransactionalJSONRequestBody = TransactionalRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiKey request
	GetApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactsCreateWithBody request with any body
	PostContactsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactsCreate(ctx context.Context, body PostContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactsCustomFields request
	GetContactsCustomFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactsDeleteWithBody request with any body
	PostContactsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactsDelete(ctx context.Context, body PostContactsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactsFind request
	GetContactsFind(ctx context.Context, params *GetContactsFindParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContactsUpdateWithBody request with any body
	PutContactsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactsUpdate(ctx context.Context, body PutContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEventsSendWithBody request with any body
	PostEventsSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEventsSend(ctx context.Context, body PostEventsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLists request
	GetLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransactionalWithBody request with any body
	PostTransactionalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactional(ctx context.Context, body PostTransactionalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsCreate(ctx context.Context, body PostContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactsCustomFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsCustomFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactsDelete(ctx context.Context, body PostContactsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactsFind(ctx context.Context, params *GetContactsFindParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsFindRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactsUpdate(ctx context.Context, body PutContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEventsSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEventsSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEventsSend(ctx context.Context, body PostEventsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEventsSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactional(ctx context.Context, body PostTransactionalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactsCreateRequest calls the generic PostContactsCreate builder with application/json body
func NewPostContactsCreateRequest(server string, body PostContactsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContactsCreateRequestWithBody generates requests for PostContactsCreate with any type of body
func NewPostContactsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactsCustomFieldsRequest generates requests for GetContactsCustomFields
func NewGetContactsCustomFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/customFields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactsDeleteRequest calls the generic PostContactsDelete builder with application/json body
func NewPostContactsDeleteRequest(server string, body PostContactsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContactsDeleteRequestWithBody generates requests for PostContactsDelete with any type of body
func NewPostContactsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactsFindRequest generates requests for GetContactsFind
func NewGetContactsFindRequest(server string, params *GetContactsFindParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/find")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutContactsUpdateRequest calls the generic PutContactsUpdate builder with application/json body
func NewPutContactsUpdateRequest(server string, body PutContactsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContactsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPutContactsUpdateRequestWithBody generates requests for PutContactsUpdate with any type of body
func NewPutContactsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEventsSendRequest calls the generic PostEventsSend builder with application/json body
func NewPostEventsSendRequest(server string, body PostEventsSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEventsSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEventsSendRequestWithBody generates requests for PostEventsSend with any type of body
func NewPostEventsSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListsRequest generates requests for GetLists
func NewGetListsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTransactionalRequest calls the generic PostTransactional builder with application/json body
func NewPostTransactionalRequest(server string, body PostTransactionalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionalRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTransactionalRequestWithBody generates requests for PostTransactional with any type of body
func NewPostTransactionalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactional")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// PostContactsCreateWithBodyWithResponse request with any body
	PostContactsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsCreateResponse, error)

	PostContactsCreateWithResponse(ctx context.Context, body PostContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsCreateResponse, error)

	// GetContactsCustomFieldsWithResponse request
	GetContactsCustomFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactsCustomFieldsResponse, error)

	// PostContactsDeleteWithBodyWithResponse request with any body
	PostContactsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsDeleteResponse, error)

	PostContactsDeleteWithResponse(ctx context.Context, body PostContactsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsDeleteResponse, error)

	// GetContactsFindWithResponse request
	GetContactsFindWithResponse(ctx context.Context, params *GetContactsFindParams, reqEditors ...RequestEditorFn) (*GetContactsFindResponse, error)

	// PutContactsUpdateWithBodyWithResponse request with any body
	PutContactsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactsUpdateResponse, error)

	PutContactsUpdateWithResponse(ctx context.Context, body PutContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactsUpdateResponse, error)

	// PostEventsSendWithBodyWithResponse request with any body
	PostEventsSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEventsSendResponse, error)

	PostEventsSendWithResponse(ctx context.Context, body PostEventsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEventsSendResponse, error)

	// GetListsWithResponse request
	GetListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListsResponse, error)

	// PostTransactionalWithBodyWithResponse request with any body
	PostTransactionalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionalResponse, error)

	PostTransactionalWithResponse(ctx context.Context, body PostTransactionalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionalResponse, error)
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`

		// TeamName The name of the team the API key belongs to.
		TeamName string `json:"teamName"`
	}
	JSON401 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactSuccessResponse
	JSON400      *ContactFailureResponse
	JSON405      *ContactFailureResponse
	JSON409      *ContactFailureResponse
}

// Status returns HTTPResponse.Status
func (r PostContactsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomField
}

// Status returns HTTPResponse.Status
func (r GetContactsCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactDeleteResponse
	JSON400      *ContactFailureResponse
	JSON404      *ContactFailureResponse
}

// Status returns HTTPResponse.Status
func (r PostContactsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsFindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contact
	JSON400      *ContactFailureResponse
}

// Status returns HTTPResponse.Status
func (r GetContactsFindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsFindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContactsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactSuccessResponse
	JSON400      *ContactFailureResponse
	JSON405      *ContactFailureResponse
}

// Status returns HTTPResponse.Status
func (r PutContactsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContactsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEventsSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventSuccessResponse
	JSON400      *EventFailureResponse
}

// Status returns HTTPResponse.Status
func (r PostEventsSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEventsSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MailingList
}

// Status returns HTTPResponse.Status
func (r GetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransactionalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionalSuccessResponse
	JSON400      *struct {
		union json.RawMessage
	}
	JSON404 *TransactionalFailure2Response
}

// Status returns HTTPResponse.Status
func (r PostTransactionalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransactionalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// PostContactsCreateWithBodyWithResponse request with arbitrary body returning *PostContactsCreateResponse
func (c *ClientWithResponses) PostContactsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsCreateResponse, error) {
	rsp, err := c.PostContactsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostContactsCreateWithResponse(ctx context.Context, body PostContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsCreateResponse, error) {
	rsp, err := c.PostContactsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsCreateResponse(rsp)
}

// GetContactsCustomFieldsWithResponse request returning *GetContactsCustomFieldsResponse
func (c *ClientWithResponses) GetContactsCustomFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactsCustomFieldsResponse, error) {
	rsp, err := c.GetContactsCustomFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsCustomFieldsResponse(rsp)
}

// PostContactsDeleteWithBodyWithResponse request with arbitrary body returning *PostContactsDeleteResponse
func (c *ClientWithResponses) PostContactsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactsDeleteResponse, error) {
	rsp, err := c.PostContactsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostContactsDeleteWithResponse(ctx context.Context, body PostContactsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactsDeleteResponse, error) {
	rsp, err := c.PostContactsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactsDeleteResponse(rsp)
}

// GetContactsFindWithResponse request returning *GetContactsFindResponse
func (c *ClientWithResponses) GetContactsFindWithResponse(ctx context.Context, params *GetContactsFindParams, reqEditors ...RequestEditorFn) (*GetContactsFindResponse, error) {
	rsp, err := c.GetContactsFind(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsFindResponse(rsp)
}

// PutContactsUpdateWithBodyWithResponse request with arbitrary body returning *PutContactsUpdateResponse
func (c *ClientWithResponses) PutContactsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactsUpdateResponse, error) {
	rsp, err := c.PutContactsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PutContactsUpdateWithResponse(ctx context.Context, body PutContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactsUpdateResponse, error) {
	rsp, err := c.PutContactsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactsUpdateResponse(rsp)
}

// PostEventsSendWithBodyWithResponse request with arbitrary body returning *PostEventsSendResponse
func (c *ClientWithResponses) PostEventsSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEventsSendResponse, error) {
	rsp, err := c.PostEventsSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEventsSendResponse(rsp)
}

func (c *ClientWithResponses) PostEventsSendWithResponse(ctx context.Context, body PostEventsSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEventsSendResponse, error) {
	rsp, err := c.PostEventsSend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEventsSendResponse(rsp)
}

// GetListsWithResponse request returning *GetListsResponse
func (c *ClientWithResponses) GetListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListsResponse, error) {
	rsp, err := c.GetLists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsResponse(rsp)
}

// PostTransactionalWithBodyWithResponse request with arbitrary body returning *PostTransactionalResponse
func (c *ClientWithResponses) PostTransactionalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionalResponse, error) {
	rsp, err := c.PostTransactionalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionalResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionalWithResponse(ctx context.Context, body PostTransactionalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionalResponse, error) {
	rsp, err := c.PostTransactional(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionalResponse(rsp)
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`

			// TeamName The name of the team the API key belongs to.
			TeamName string `json:"teamName"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostContactsCreateResponse parses an HTTP response from a PostContactsCreateWithResponse call
func ParsePostContactsCreateResponse(rsp *http.Response) (*PostContactsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetContactsCustomFieldsResponse parses an HTTP response from a GetContactsCustomFieldsWithResponse call
func ParseGetContactsCustomFieldsResponse(rsp *http.Response) (*GetContactsCustomFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContactsDeleteResponse parses an HTTP response from a PostContactsDeleteWithResponse call
func ParsePostContactsDeleteResponse(rsp *http.Response) (*PostContactsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetContactsFindResponse parses an HTTP response from a GetContactsFindWithResponse call
func ParseGetContactsFindResponse(rsp *http.Response) (*GetContactsFindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsFindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutContactsUpdateResponse parses an HTTP response from a PutContactsUpdateWithResponse call
func ParsePutContactsUpdateResponse(rsp *http.Response) (*PutContactsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContactsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ContactFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePostEventsSendResponse parses an HTTP response from a PostEventsSendWithResponse call
func ParsePostEventsSendResponse(rsp *http.Response) (*PostEventsSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEventsSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EventFailureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetListsResponse parses an HTTP response from a GetListsWithResponse call
func ParseGetListsResponse(rsp *http.Response) (*GetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MailingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTransactionalResponse parses an HTTP response from a PostTransactionalWithResponse call
func ParsePostTransactionalResponse(rsp *http.Response) (*PostTransactionalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransactionalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionalSuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest TransactionalFailure2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
